{"version":3,"sources":["JsonToJava.js","App.js","index.js"],"names":["convertToJavaString","jsonString","config","console","log","replace","obj","JSON","parse","keys","Object","result","forEach","element","name","value","getJavaClass","string","lower","charAt","toLowerCase","slice","snakeToCamel","replaceAll","match","toUpperCase","toJavaNaming","toJavaField","jsObject","jsType","Number","isInteger","Array","isArray","lenth","panelStyle","padding","textFieldStyle","marginTop","App","javaStr","inputRef","useRef","useState","dialogOpen","setDialogOpen","inuptHasError","setInuptHasError","javaString","setJavaString","configSnakeToCamel","setConfigSnakeToCamel","Typography","component","sx","variant","TextField","id","label","defaultValue","minRows","error","fullWidth","multiline","FormGroup","FormControlLabel","control","Checkbox","checked","onClick","p","Button","str","current","e","color","mr","IconButton","Dialog","open","DialogTitle","DialogContent","DialogContentText","split","map","mb","startsWith","DialogActions","navigator","clipboard","writeText","autoFocus","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a180dc89.chunk.js","sourcesContent":["export default function convertToJavaString(jsonString, config) {\r\n    console.log(\"Input: \" + jsonString);\r\n    jsonString = jsonString.replace(/\\d\\.\\d\\d*\\s*,/, \"1.1,\");\r\n    console.log(\"After Regex: \" + jsonString);\r\n    const obj = JSON.parse(jsonString);\r\n    const keys = Object.keys(obj);\r\n\r\n    let result = \"\";\r\n    keys.forEach(element => {\r\n        result += toJavaField(element, obj[element], config) + \"\\n\";\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nfunction toJavaField(name, value, config) {\r\n    return `    @JsonProperty(\"${name}\")\\n    private ${getJavaClass(value)} ${toJavaNaming(name, config)};\\n`;\r\n}\r\n\r\nfunction getJavaClass(jsObject) {\r\n    const jsType = typeof (jsObject);\r\n\r\n    if (jsType === \"string\") return \"String\";\r\n    if (jsType === \"boolean\") return \"Boolean\";\r\n    if (jsType === \"number\") {\r\n        if (Number.isInteger(jsObject)) return \"Integer\";\r\n        return \"Float\";\r\n    }\r\n    if (jsType === \"object\" && Array.isArray(jsObject)) {\r\n        if (jsObject.lenth === 0) return \"List<Object>\";\r\n        return `List<${getJavaClass(jsObject[0])}>`;\r\n    }\r\n    return \"Object\";\r\n}\r\n\r\nfunction toJavaNaming(string, config) {\r\n    const lower = string.charAt(0).toLowerCase() + string.slice(1);\r\n\r\n    if(config.snakeToCamel) return lower.replaceAll(/_(\\w)/g, (match) => { return match.slice(1).toUpperCase(); });\r\n\r\n    return lower;\r\n}","import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControlLabel, FormGroup, IconButton, TextField, Typography } from \"@mui/material\";\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useRef, useState } from \"react\";\nimport convertToJavaString from \"./JsonToJava\"\n\nconst panelStyle = {\n  padding: 4,\n}\n\nconst textFieldStyle = {\n  marginTop: 2,\n}\n\nfunction generateDialogText(javaStr) {\n  return (\n    javaStr.split('\\n').map(str =>\n      <Typography variant=\"body1\" sx={{ mb: str.startsWith(\"    @\") ? 0 : 2 }}>\n        {str}\n      </Typography>\n    )\n  )\n}\n\nfunction App() {\n  const inputRef = useRef();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [inuptHasError, setInuptHasError] = useState(false);\n  const [javaString, setJavaString] = useState(\"\");\n  const [configSnakeToCamel, setConfigSnakeToCamel] = useState(true);\n\n  const handleGenerate = () => {\n    try {\n      const str = convertToJavaString(inputRef.current.value, { snakeToCamel: configSnakeToCamel });\n      console.log(\"Result:\\n\" + str);\n      setJavaString(str);\n      setDialogOpen(true);\n    }\n    catch (e) {\n      setInuptHasError(true);\n      console.log(\"Conversion went wrong\");\n    }\n  };\n\n  const handleClearInput = () => {\n    inputRef.current.value = \"\";\n    setInuptHasError(false);\n  }\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(javaString);\n    setDialogOpen(false);\n  };\n\n  return (\n    <Typography component=\"div\" sx={panelStyle}>\n      <Typography variant=\"h5\" >\n        Convert an example JSON Object into a Java Class\n      </Typography>\n      <TextField\n        sx={textFieldStyle}\n        inputRef={inputRef}\n        id=\"outlined-textarea\"\n        label=\"JSON example\"\n        defaultValue='{\"name\": \"John\"}'\n        minRows=\"4\"\n        error={inuptHasError}\n        fullWidth\n        multiline\n      />\n\n      <FormGroup>\n        <FormControlLabel control={\n          <Checkbox checked={configSnakeToCamel} onClick={() => setConfigSnakeToCamel(!configSnakeToCamel)\n          } />} label=\"[snake_case] to [camelCase]\" />\n      </FormGroup>\n\n      <Typography component=\"div\" sx={{ p: 2 }}>\n        <Button\n          onClick={handleGenerate}\n          variant=\"contained\"\n          color=\"primary\"\n          sx={{ mr: 1 }}>\n          Generate\n        </Button>\n        <IconButton onClick={handleClearInput}>\n          <DeleteIcon color=\"error\" />\n        </IconButton>\n      </Typography>\n\n      <Dialog\n        open={dialogOpen}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          {\"Copy this Java representation\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {generateDialogText(javaString)}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleCopy} variant=\"contained\" autoFocus>\n            Copy\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Typography>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}